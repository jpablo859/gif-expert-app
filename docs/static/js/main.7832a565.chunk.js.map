{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GitGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","categorias","setCategorias","useState","inputValue","setInputValue","onSubmit","e","preventDefault","find","item","alert","trim","length","type","value","onChange","console","log","target","getGifs","categoria","a","url","fetch","resp","json","data","gifs","map","id","title","images","downsized_medium","GifGridItem","className","src","alt","GitGrid","loading","state","setState","useEffect","imgs","useFetchGifs","img","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,WAAYC,EAAmB,EAAnBA,cAAmB,EAEpBC,mBAAS,IAFW,mBAEjDC,EAFiD,KAErCC,EAFqC,KA2BxD,OACI,mCACI,uBAAMC,SApBO,SAAAC,GACjBA,EAAEC,iBAEUP,EAAWQ,MAAK,SAAAC,GAAI,OAAIA,IAASN,KAGzCO,MAAM,aAIPP,EAAWQ,OAAOC,OAAS,IAC1BX,EAAc,CAACE,GAAF,mBAAgBH,KAC7BI,EAAc,MAQd,UACI,6BAAKD,IACL,uBACIU,KAAK,OACLC,MAAOX,EACPY,SA9BK,SAAAT,GACjBU,QAAQC,IAAIX,EAAEY,OAAOJ,OACrBV,EAAcE,EAAEY,OAAOJ,gB,+BCRlBK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,4DACH,mCACF,GACRC,EAHa,iDAGmCF,EAHnC,kBAEL,GAFK,oBACH,oCADG,kBAMIG,MAAMD,GANV,cAMTE,EANS,gBAOMA,EAAKC,OAPX,uBAORC,EAPQ,EAORA,KAEDC,EAAOD,EAAKE,KAAI,kBAAiD,CAACC,GAAlD,EAAEA,GAAoDC,MAAtD,EAAKA,MAAwDR,IAA7D,EAAWS,OAAQC,iBAAkBV,QAT5C,kBAWRK,GAXQ,4FAAH,sDCCPM,EAAc,SAAC,GAAiB,IAAhBH,EAAe,EAAfA,MAAMR,EAAS,EAATA,IAC/B,OACI,sBAAKY,UAAU,yCAAf,UACI,qBAAKC,IAAKb,EAAKc,IAAKN,IACpB,4BAAIA,QCFHO,EAAU,SAAC,GAAiB,IAAhBjB,EAAe,EAAfA,UAAe,ECDZ,SAACA,GAAe,IAAD,EAEblB,mBAAS,CAC/BwB,KAAK,GACLY,SAAS,IAJ0B,mBAEhCC,EAFgC,KAEzBC,EAFyB,KAiBvC,OAVAC,qBAAU,WACN,sBAAC,4BAAApB,EAAA,sEACsBF,EAAQC,GAD9B,OACSsB,EADT,OAEGF,EAAS,CACLd,KAAKgB,EACLJ,SAAQ,IAJf,0CAAD,KAOD,CAAClB,IAEGmB,EDdkBI,CAAavB,GAA9BM,EAF4B,EAE5BA,KAAMY,EAFsB,EAEtBA,QAId,OAFAtB,QAAQC,IAAIS,GAGR,qCACI,6BAAKN,IACHkB,GAAW,6CACb,qBAAKJ,UAAU,YAAf,SAEQR,EAEIA,EAAKE,KAAI,SAAAgB,GAAG,OACR,cAAC,EAAD,eAEQA,GADCA,EAAIf,OAKjB,WEpBXgB,EAAe,WAAO,IAAD,EAEM3C,mBAAS,CAAC,WAFhB,mBAEvBF,EAFuB,KAEXC,EAFW,KAI9B,OACI,qCACI,8CACA,cAAC,EAAD,CACID,WAAYA,EACZC,cAAeA,IAEnB,uBAEA,6BAGQD,EAEIA,EAAW4B,KAAI,SAAAnB,GAAI,OAAI,cAAC,EAAD,CAEnBW,UAAWX,GADNA,MAIT,W,YCtBxBqC,IAASC,OACL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.7832a565.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({categorias, setCategorias}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n    const handleChange = e => {\r\n        console.log(e.target.value)\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        const res = categorias.find(item => item === inputValue);\r\n\r\n        if(res) {\r\n            alert('Ya existe');\r\n            return\r\n        }\r\n\r\n        if(inputValue.trim().length > 2) {\r\n            setCategorias([inputValue,...categorias]);\r\n            setInputValue('');\r\n        }\r\n\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={handleSubmit}>\r\n                <h1>{inputValue}</h1>\r\n                <input \r\n                    type=\"text\"\r\n                    value={inputValue}\r\n                    onChange={handleChange}\r\n                />\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    categorias: PropTypes.array.isRequired,\r\n    setCategorias: PropTypes.func.isRequired\r\n    // mensaje: PropTypes.string.isRequired\r\n}\r\n","\r\nexport const getGifs = async (categoria) => {\r\n    const API_KEY = 'PBO5aPWAVyVg7x07EN67e6SaYZjZm79W';\r\n    const LIMIT = 10;\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${categoria}&limit=${LIMIT}&api_key=${API_KEY}`;\r\n    try {\r\n        \r\n        const resp = await fetch(url);\r\n        const {data} = await resp.json();\r\n\r\n        const gifs = data.map(({id,title,images:{downsized_medium:{url}}}) => ({id, title, url}))\r\n\r\n        return gifs\r\n\r\n    } catch (err) {\r\n\r\n    }\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({title,url}) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title}></img>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GitGrid = ({categoria}) => {\r\n\r\n    const { data, loading} = useFetchGifs(categoria);\r\n\r\n    console.log(data)\r\n    \r\n    return (\r\n        <>\r\n            <h3>{categoria}</h3>  \r\n            { loading && <p>Cargando ...</p>}\r\n            <div className=\"card-grid\">\r\n                {\r\n                    data\r\n                    ? \r\n                        data.map(img => \r\n                            <GifGridItem\r\n                                key={img.id}\r\n                                {...img}\r\n                            />\r\n                        )\r\n                    :\r\n                        null\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport {getGifs} from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (categoria) => {\r\n    \r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading: true\r\n    })\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            const imgs = await getGifs(categoria);\r\n            setState({\r\n                data:imgs,\r\n                loading:false\r\n            })\r\n        })()\r\n    }, [categoria])\r\n\r\n    return state;\r\n\r\n}\r\n","import {useState} from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GitGrid } from './components/GitGrid';\r\n\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categorias, setCategorias] = useState(['Futbol']);\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory\r\n                categorias={categorias}\r\n                setCategorias={setCategorias}\r\n            />\r\n            <hr/>\r\n\r\n            <ol>\r\n\r\n                {\r\n                    categorias \r\n                    ? \r\n                        categorias.map(item => <GitGrid\r\n                            key={item}\r\n                            categoria={item}\r\n                        />)\r\n                    :\r\n                        null\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n \r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {GifExpertApp} from './GifExpertApp';\nimport './index.css';\nimport 'animate.css';\n\nReactDOM.render(\n    <GifExpertApp />\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}